# -*- coding: utf-8 -*-
"""HR Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q2Wrttumb3TbUZTRhXoREA6P85JigVUl
"""

# Importing Libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

HR_data = pd.read_csv('/content/HR Data.csv')

HR_data.head()

HR_data.info()

np.unique(HR_data['Age'])

np.unique(HR_data['Attrition'])

np.unique(HR_data['BusinessTravel'])

np.unique(HR_data['Department'])

np.unique(HR_data['Education'])

np.unique(HR_data['EducationField'])

np.unique(HR_data['JobRole'])

np.unique(HR_data['MaritalStatus'])

np.unique(HR_data['YearsWithCurrManager'])

"""Preprocesing

"""

HR_data

HR_data.isnull().sum()

HR_data.duplicated().sum()

HR_data.drop(['EmployeeCount', 'Over18', 'StandardHours'], axis=1, inplace=True)

"""Encoding Process"""

# Encode Attrition

HR_data['Attrition'].replace(to_replace='No',  value=0, inplace=True)
HR_data['Attrition'].replace(to_replace='Yes',  value=1, inplace=True)

# Encode Business Travel

HR_data['BusinessTravel'].replace(to_replace='Non-Travel',  value=0, inplace=True)
HR_data['BusinessTravel'].replace(to_replace='Travel_Rarely',  value=1, inplace=True)
HR_data['BusinessTravel'].replace(to_replace='Travel_Frequently',  value=2, inplace=True)

# Encode Department

HR_data['Department'].replace(to_replace='Human Resources',  value=0, inplace=True)
HR_data['Department'].replace(to_replace='Research & Development',  value=1, inplace=True)
HR_data['Department'].replace(to_replace='Sales',  value=2, inplace=True)

# Encode Education Field

HR_data['EducationField'].replace(to_replace='Human Resources',  value=0, inplace=True)
HR_data['EducationField'].replace(to_replace='Life Sciences',  value=1, inplace=True)
HR_data['EducationField'].replace(to_replace='Marketing',  value=2, inplace=True)
HR_data['EducationField'].replace(to_replace='Medical',  value=3, inplace=True)
HR_data['EducationField'].replace(to_replace='Technical Degree',  value=4, inplace=True)
HR_data['EducationField'].replace(to_replace='Other',  value=5, inplace=True)

# Encode Gender

HR_data['Gender'].replace(to_replace='Female',  value=0, inplace=True)
HR_data['Gender'].replace(to_replace='Male',  value=1, inplace=True)

# Encode Job Role

HR_data['JobRole'].replace(to_replace='Healthcare Representative',  value=0, inplace=True)
HR_data['JobRole'].replace(to_replace='Human Resources',  value=1, inplace=True)
HR_data['JobRole'].replace(to_replace='Laboratory Technician',  value=2, inplace=True)
HR_data['JobRole'].replace(to_replace='Manager',  value=3, inplace=True)
HR_data['JobRole'].replace(to_replace='Manufacturing Director',  value=4, inplace=True)
HR_data['JobRole'].replace(to_replace='Research Director',  value=5, inplace=True)
HR_data['JobRole'].replace(to_replace='Research Scientist',  value=6, inplace=True)
HR_data['JobRole'].replace(to_replace='Sales Executive',  value=7, inplace=True)
HR_data['JobRole'].replace(to_replace='Sales Representative',  value=8, inplace=True)

# Encode Marital Status

HR_data['MaritalStatus'].replace(to_replace='Divorced',  value=0, inplace=True)
HR_data['MaritalStatus'].replace(to_replace='Married',  value=1, inplace=True)
HR_data['MaritalStatus'].replace(to_replace='Single',  value=2, inplace=True)

HR_data

"""Oversampling"""

HR_data['Attrition'].value_counts()

import numpy as np
from imblearn.over_sampling import SMOTE

X = HR_data[['BusinessTravel', 'DailyRate',
        'Department', 'DistanceFromHome', 'Education', 'EducationField', 'EmployeeNumber', 'EnvironmentSatisfaction',
        'Gender', 'HourlyRate', 'JobInvolvement', 'JobLevel', 'JobRole', 'JobSatisfaction', 'MaritalStatus', 'MonthlyIncome',
       'MonthlyRate', 'NumCompaniesWorked', 'OverTime', 'PercentSalaryHike', 'PerformanceRating',
        'RelationshipSatisfaction','StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear', 'WorkLifeBalance',
        'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']]
y = HR_data['Attrition']

X

y

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Assuming 'X' is your DataFrame with categorical features
label_encoders = {}
for col in X.columns:
    if X[col].dtype == 'object':  # Check if the column is categorical
        le = LabelEncoder()
        X[col] = le.fit_transform(X[col])
        label_encoders[col] = le  # Store the encoder for later use

# Now you can apply SMOTE
smote = SMOTE(sampling_strategy={0:1242, 1:1242}, random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

print("Original class distribution:", np.bincount(y))
print("Resampled class distribution:", np.bincount(y_resampled))

y_resampled.value_counts()

HR_data2 = pd.concat([X_resampled, y_resampled], axis = 1)
HR_data2